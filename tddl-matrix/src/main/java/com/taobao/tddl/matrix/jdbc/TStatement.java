package com.taobao.tddl.matrix.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import com.taobao.tddl.common.jdbc.ParameterContext;
import com.taobao.tddl.common.model.ExtraCmd;
import com.taobao.tddl.common.model.SqlType;
import com.taobao.tddl.common.utils.logger.Logger;
import com.taobao.tddl.common.utils.logger.LoggerFactory;
import com.taobao.tddl.matrix.jdbc.utils.PreParser;

/**
 * @author mengshi.sunmengshi 2013-11-22 下午3:26:28
 * @since 5.1.0
 */
public class TStatement implements Statement {

    private static final Logger       log      = LoggerFactory.getLogger(TStatement.class);

    protected String                  sql;
    protected TDataSource             ds;
    protected TConnection             conn;
    /**
     * 更新计数，如果执行了多次，那么这个值只会返回最后一次执行的结果。 如果是一个query，那么返回的数据应该是-1
     */
    protected int                     updateCount;

    /**
     * 经过计算后的结果集，允许使用 getResult函数调用. 一个statement只允许有一个结果集
     */
    protected ResultSet               currentResultSet;

    protected Map<String, Comparable> extraCmd = new HashMap<String, Comparable>(4);

    public TStatement(TDataSource ds, TConnection tConnection){
        this.ds = ds;
        this.conn = tConnection;
    }

    public TStatement(TDataSource ds, TConnection tConnection, String sql){
        this.ds = ds;
        this.conn = tConnection;
        this.sql = sql;
    }

    protected void checkClosed() throws SQLException {
        if (closed) {
            throw new SQLException("No operations allowed after statement closed.");
        }
    }

    // jdbc规范: 返回true表示executeQuery，false表示executeUpdate
    public boolean execute(String sql) throws SQLException {
        return executeInternal(sql, -1, null, null);
    }

    private boolean executeInternal(String sql, int autoGeneratedKeys, int[] columnIndexes, String[] columnNames)
                                                                                                                 throws SQLException {

        SqlType sqlType = PreParser.getSqlType(sql);
        if (sqlType == SqlType.SELECT || sqlType == SqlType.SELECT_FOR_UPDATE/**
         * 
         * || sqlType == SqlType.SHOW
         **/
        ) {
            executeQuery(sql);
            return true;
        } else if (sqlType == SqlType.INSERT || sqlType == SqlType.UPDATE || sqlType == SqlType.DELETE
                   || sqlType == SqlType.REPLACE || sqlType == SqlType.TRUNCATE || sqlType == SqlType.CREATE
                   || sqlType == SqlType.DROP || sqlType == SqlType.LOAD || sqlType == SqlType.MERGE) {
            if (autoGeneratedKeys == -1 && columnIndexes == null && columnNames == null) {
                executeUpdate(sql);
            } else if (autoGeneratedKeys != -1) {
                executeUpdate(sql, autoGeneratedKeys);
            } else if (columnIndexes != null) {
                executeUpdate(sql, columnIndexes);
            } else if (columnNames != null) {
                executeUpdate(sql, columnNames);
            } else {
                executeUpdate(sql);
            }

            return false;
        } else {
            throw new SQLException("only select, insert, update, delete,replace,truncate,create,drop,load,merge sql is supported");
        }
    }

    public ResultSet getResultSet() throws SQLException {
        return currentResultSet;
    }

    public int getUpdateCount() throws SQLException {
        return updateCount;
    }

    public Connection getConnection() throws SQLException {
        return this.conn;
    }

    /*
     * ========================================================================
     * executeQuery 查询逻辑 这里按照mysql
     * connection逻辑，调用connection的executeSQL方法返回resultset Connection 的 execSQL方法
     * ======================================================================
     */
    @SuppressWarnings("unchecked")
    public ResultSet executeQuery(String sql) throws SQLException {
        checkClosed();
        ensureResultSetIsEmpty();
        currentResultSet = this.conn.executeSQL(sql,
            (Map<Integer, ParameterContext>) Collections.EMPTY_MAP,
            this,
            extraCmd);
        return currentResultSet;
        // return this.uConnection.executeSQL(sql);
    }

    /*
     * ========================================================================
     * 关闭逻辑
     * ======================================================================
     */
    protected boolean           closed;        // 当前statment 是否是关闭的

    protected PreparedStatement proxyStatement;

    private int                 maxFieldSize;

    private int                 maxRows;

    private int                 queryTimeOut;

    private int                 direction;

    public void close() throws SQLException {
        close(true);

    }

    void close(boolean removeThis) throws SQLException {
        if (closed) {
            return;
        }
        try {

            if (this.proxyStatement != null) proxyStatement.close();
            if (currentResultSet != null) {
                currentResultSet.close();
            }

            if (removeThis) {
                conn.removeStatement(this);
            }
        } catch (SQLException e) {
            log.warn("Close currentResultSet failed.", e);
        } finally {
            currentResultSet = null;
        }
        closed = true;

    }

    /**
     * 如果新建了查询，那么上一次查询的结果集应该被显示的关闭掉。这才是符合jdbc规范的
     * 
     * @throws SQLException
     */
    protected void ensureResultSetIsEmpty() throws SQLException {

        if (currentResultSet != null) {
            // log.debug("result set is not null,close current result set");
            try {
                currentResultSet.close();
            } catch (SQLException e) {
                log.error("exception on close last result set . can do nothing..", e);
            } finally {
                // 最终要显示的关闭它
                currentResultSet = null;
            }
        }

    }

    /*
     * ========================================================================
     * executeUpdate逻辑 这里按照mysql
     * connection逻辑，调用connection的executeSQL方法返回resultset
     * ,然后根据resultset获得affertrows Connection 的 execSQL方法
     * ======================================================================
     */
    @SuppressWarnings("unchecked")
    public int executeUpdate(String sql) throws SQLException {
        checkClosed();
        ensureResultSetIsEmpty();
        currentResultSet = this.conn.executeSQL(sql,
            ((Map<Integer, ParameterContext>) Collections.EMPTY_MAP),
            this,
            extraCmd);
        return ((TResultSet) currentResultSet).getAffectRows();
    }

    /**
     * andor 不支持 autoGeneratedKeys
     */
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return 0;
    }

    /**
     * andor 不支持 autoGeneratedKeys
     */
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return 0;
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return 0;
    }

    /**
     * 不支持 current ResultSet
     */
    public boolean getMoreResults(int current) throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return false;
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return null;
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return false;
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return false;
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return false;
    }

    public int getResultSetHoldability() throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return 0;
    }

    public boolean isClosed() throws SQLException {
        // TODO Auto-generated method stub
        return this.closed;
    }

    public void setPoolable(boolean poolable) throws SQLException {
        // TODO Auto-generated method stub

    }

    public boolean isPoolable() throws SQLException {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException();
        // return false;
    }

    public int getMaxFieldSize() throws SQLException {
        return this.maxFieldSize;
    }

    public void setMaxFieldSize(int max) throws SQLException {
        this.maxFieldSize = max;

    }

    public int getMaxRows() throws SQLException {
        return this.maxRows;
    }

    public void setMaxRows(int max) throws SQLException {
        this.maxRows = max;
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        // TODO Auto-generated method stub

    }

    /**
     * 未支持
     */
    public int getQueryTimeout() throws SQLException {
        return this.queryTimeOut;
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        this.queryTimeOut = seconds;

    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        // TODO Auto-generated method stub
        return null;
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        // TODO Auto-generated method stub
        return false;
    }

    public void cancel() throws SQLException {
        throw new UnsupportedOperationException();
        // TODO Auto-generated method stub

    }

    public SQLWarning getWarnings() throws SQLException {
        // TODO Auto-generated method stub
        return null;
    }

    public void clearWarnings() throws SQLException {
        // TODO Auto-generated method stub

    }

    public void setCursorName(String name) throws SQLException {
        throw new UnsupportedOperationException();

    }

    public boolean getMoreResults() throws SQLException {
        // TODO Auto-generated method stub
        // return false;
        throw new UnsupportedOperationException();
    }

    public void setFetchDirection(int direction) throws SQLException {
        this.direction = direction;

    }

    public int getFetchDirection() throws SQLException {
        return this.direction;
    }

    public void setFetchSize(int rows) throws SQLException {
        extraCmd.put(ExtraCmd.ExecutionExtraCmd.FETCH_SIZE, rows);
    }

    public int getFetchSize() throws SQLException {
        Comparable val = extraCmd.get(ExtraCmd.ExecutionExtraCmd.FETCH_SIZE);
        if (val == null) {
            return 0;
        }
        return (Integer) val;
    }

    public int getResultSetConcurrency() throws SQLException {
        // TODO Auto-generated method stub
        return 0;
    }

    public int getResultSetType() throws SQLException {
        // TODO Auto-generated method stub
        return 0;
    }

    public void addBatch(String sql) throws SQLException {
        // TODO Auto-generated method stub

    }

    public void clearBatch() throws SQLException {
        // TODO Auto-generated method stub

    }

    public int[] executeBatch() throws SQLException {
        // TODO Auto-generated method stub
        return null;
    }

    public void setProxyStatement(PreparedStatement ps) {
        this.proxyStatement = ps;

    }

}
